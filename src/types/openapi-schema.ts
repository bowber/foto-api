/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/register": {
    /**
     * Get salt & id for user registration 
     * @description Get salt for password hashing & id for user registration. This id & salt is only valid in 1 minutes
     */
    get: operations["registerPrepare"];
    /**
     * Create a new user 
     * @description Create a new user
     */
    post: operations["register"];
  };
  "/login": {
    /**
     * Get salt and pepper for login 
     * @description Get salt and pepper for login
     */
    get: operations["getSaltAndPepper"];
    /**
     * Login 
     * @description Login
     */
    post: operations["login"];
  };
  "/users/my": {
    /**
     * Get user info 
     * @description Get user info
     */
    get: operations["getUserInfo"];
  };
  "/users/my/albums": {
    /**
     * Get user albums 
     * @description Get user albums
     */
    get: operations["getUserAlbums"];
  };
  "/users/my/albums/{albumId}": {
    /**
     * Get user album photos 
     * @description Get user album photos
     */
    get: operations["getUserAlbumPhotos"];
  };
}

export interface components {
  schemas: {
    Salt: string;
    Pepper: string;
    SaltAndPepper: {
      salt?: components["schemas"]["Salt"];
      pepper?: components["schemas"]["Pepper"];
    };
    User: {
      id?: string;
      name?: string;
      email?: string;
    };
    Error: {
      message?: string;
    };
    Album: {
      id?: string;
      name?: string;
      description?: string;
      photos?: (components["schemas"]["Photo"])[];
    };
    Photo: {
      id?: string;
      name?: string;
      description?: string;
      url?: string;
    };
    LoginRequest: {
      username?: string;
      hashedPassword?: string;
    };
    LoginResponse: {
      token?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  registerPrepare: {
    /**
     * Get salt & id for user registration 
     * @description Get salt for password hashing & id for user registration. This id & salt is only valid in 1 minutes
     */
    parameters: {
        /** @description Username */
      query: {
        username: string;
      };
    };
    responses: {
      /** @description Salt */
      200: {
        content: {
          "application/json": components["schemas"]["Salt"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description User already exists */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  register: {
    /**
     * Create a new user 
     * @description Create a new user
     */
    /** @description User to create */
    requestBody: {
      content: {
        "application/json": {
          identifiers?: components["schemas"]["User"];
          hashedPassword?: string;
        };
      };
    };
    responses: {
      /** @description User created */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description User already exists */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getSaltAndPepper: {
    /**
     * Get salt and pepper for login 
     * @description Get salt and pepper for login
     */
    parameters: {
        /** @description Username */
      query: {
        username: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["SaltAndPepper"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  login: {
    /**
     * Login 
     * @description Login
     */
    /** @description Login request */
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      /** @description Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getUserInfo: {
    /**
     * Get user info 
     * @description Get user info
     */
    parameters: {
        /** @description UserID in Bearer JWT */
      header: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getUserAlbums: {
    /**
     * Get user albums 
     * @description Get user albums
     */
    parameters: {
        /** @description Limit of photos to return */
      query?: {
        limit?: number;
      };
        /** @description UserID in Bearer JWT */
      header: {
        userId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Album"])[];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getUserAlbumPhotos: {
    /**
     * Get user album photos 
     * @description Get user album photos
     */
    parameters: {
        /** @description Limit of photos to return */
      query?: {
        limit?: number;
      };
        /** @description UserID in Bearer JWT */
      header: {
        userId: string;
      };
        /** @description Album ID */
      path: {
        albumId: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          "application/json": (components["schemas"]["Photo"])[];
        };
      };
      /** @description Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** @description Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}
