openapi: "3.0.2"
info:
  title: Foto API
  version: "0.1"

servers:
  - url: https://krnckqj529.execute-api.ap-southeast-1.amazonaws.com/Prod/
    description: Testing server
  - url: https://safeyb3sxk.execute-api.ap-southeast-1.amazonaws.com/Prod/
    description: Production server
paths:
  /register:
    get:
      summary: Get salt for user registration
      description: Get salt for password hashing. This salt is only valid in 1 minutes
      operationId: registerPrepare
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Salt
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Salt"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a new user
      description: Create a new user
      operationId: register
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                credentialInfo:
                  $ref: "#/components/schemas/User"
                saltedPassword:
                  type: string          
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    get:
      summary: Get salt and pepper for login
      description: Get salt and pepper for login
      operationId: getSaltAndPepper
      parameters:
        - name: email
          in: query
          description: email
          required: true
          schema:
            type: object
            properties:
              salt:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  salt:
                    $ref: "#/components/schemas/Salt"
                  pepper:
                    $ref: "#/components/schemas/Pepper"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Login
      description: Login
      operationId: login
      requestBody:
        description: Login request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/my:
    get:
      summary: Get user info
      description: Get user info
      operationId: getUserInfo
      parameters:
        - name: userId
          in: header
          description: UserID in Bearer JWT
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/my/albums:
    get:
      summary: Get user albums
      description: Get user albums
      operationId: getUserAlbums
      parameters:
        - name: userId
          in: header
          description: UserID in Bearer JWT
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit of photos to return
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Album"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/my/albums/{albumId}:
    get:
      summary: Get user album photos
      description: Get user album photos
      operationId: getUserAlbumPhotos
      parameters:
        - name: userId
          in: header
          description: UserID in Bearer JWT
          required: true
          schema:
            type: string
        - name: albumId
          in: path
          description: Album ID
          required: true
          schema:
            type: string
        - name: limit
          in: query
          description: Limit of photos to return
          required: false
          schema:
            type: integer
            default: 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Photo"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Salt:
      type: string
    Pepper:
      type: string
    User:
      type: object
      properties:
        email:
          type: string
    Error:
      type: object
      properties:
        message:
          type: string
    Album:
      type: object
      properties:
        albumID:
          type: string
        name:
          type: string
        description:
          type: string
        photos:
          type: array
          items:
            $ref: "#/components/schemas/Photo"
    Photo:
      type: object
      properties:
        photoID:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        saltedPassword:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
